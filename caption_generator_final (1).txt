# -*- coding: utf-8 -*-
"""Caption generator Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l5qqVbx3Mh1rc0sP84DsLCWyI4SJwfPG
"""

from pickle import load
from numpy import argmax
from keras.preprocessing.sequence import pad_sequences
from keras.applications.vgg16 import VGG16
from keras.preprocessing.image import load_img
from keras.preprocessing.image import img_to_array
from keras.applications.vgg16 import preprocess_input
from keras.models import Model
from keras.models import load_model

tokenizer = load(open('/content/drive/My Drive/tokenizer.pkl', 'rb'))
max_length = 34

def extract_features(filename):
	model = VGG16()
	model.layers.pop()
	model = Model(inputs=model.inputs, outputs=model.layers[-1].output)
	image = load_img(filename, target_size=(224, 224))
	image = img_to_array(image)
	image = image.reshape((1, image.shape[0], image.shape[1], image.shape[2]))
	image = preprocess_input(image)
	feature = model.predict(image, verbose=0)
	return feature

def word_for_id(integer, tokenizer):
	for word, index in tokenizer.word_index.items():
		if index == integer:
			return word
	return None

def generate_desc(model, tokenizer, photo, max_length):
	in_text = 'startseq'
	for i in range(max_length):
		sequence = tokenizer.texts_to_sequences([in_text])[0]
		sequence = pad_sequences([sequence], maxlen=max_length)
		yhat = model.predict([photo,sequence], verbose=0)
		yhat = argmax(yhat)
		word = word_for_id(yhat, tokenizer)
		if word is None:
			break
		in_text += ' ' + word
		if word == 'endseq':
			break
	return in_text

tokenizer = load(open('/content/drive/My Drive/tokenizer.pkl', 'rb'))
max_length = 60
model = load_model('/content/drive/My Drive/model-ep005-loss3.549-val_loss3.856.h5')
photo = extract_features('/content/drive/My Drive/IMG20191009122016.jpg')
description = generate_desc(model, tokenizer, photo, max_length)
print(description)

import cv2 
from keras.preprocessing.image import load_img
import matplotlib.pyplot as plt 
image=load_img('/content/drive/My Drive/262642489_f5c6b9e65b.jpg')
plt.imshow(image)

photo = extract_features('/content/drive/My Drive/262642489_f5c6b9e65b.jpg')
description = generate_desc(model, tokenizer, photo, max_length)
print(description)

